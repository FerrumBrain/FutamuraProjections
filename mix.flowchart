{
read program, division, vs0;
init:
    := residual ' ;
    := program parse program vs0;
    := pp0 lookupInitial program;
    := pendingLabels '();
    := pending '((pp0$vs0));
    := marked '();
    goto cont_external;
cont_external:
    := tmpDynamic hd pending;
    := pp hd tmpDynamic;
    := tmpDynamic tl tmpDynamic;
    := vs hd tmpDynamic;
    := tmpDynamic '(pp$vs);
    := marked cons tmpDynamic marked;
    := code initialCode pp vs;
    := pending tl pending;
    := ppi pp0;
    := bb lookup pp0 program;
    := tmpDynamic == ppi pp;
    if tmpDynamic goto cont_internal else continue_lookup;
continue_lookup:
    := ppi nextLabel ppi program pendingLabels;
    := bb lookup ppi program;
    := tmpDynamic == ppi pp;
    if tmpDynamic goto cont_internal else continue_lookup;
cont_internal:
    := command firstCommand bb;
    := bb tl bb;
    := op hd command;
    := command tl command;
    := eqSymbol ':=;
    := tmpStatic == op eqSymbol;
    if tmpStatic goto do_assignment else cont1;
do_assignment:
    := X hd command;
    := tmpStatic tl command;
    := exp hd tmpStatic;
    := tmpStatic isStatic division X;
    if tmpStatic goto do_assignment_static else do_assignment_dynamic;
do_assignment_static:
    := tmpDynamic eval exp vs;
    := vs addToState vs X tmpDynamic;
    := tmpStatic isEmpty bb;
    if tmpStatic goto stop_internal else cont_internal;
do_assignment_dynamic:
    := tmpDynamic reduce exp vs;
    := code extendAssignment code X tmpDynamic;
    := tmpStatic isEmpty bb;
    if tmpStatic goto stop_internal else cont_internal;
do_goto:
    := tmpStatic hd command;
    := bb lookup tmpStatic program;
    := tmpStatic isEmpty bb;
    if tmpStatic goto stop_internal else cont_internal;
do_if:
    := exp hd command;
    := tmpStatic tl command;
    := tmpStatic tl tmpStatic;
    := trueLabel hd tmpStatic;
    := tmpStatic tl tmpStatic;
    := tmpStatic tl tmpStatic;
    := falseLabel hd tmpStatic;
    := tmpStatic isStatic division exp;
    if tmpStatic goto do_if_static else do_if_dynamic;
do_if_static:
    := tmpDynamic eval exp vs;
    if tmpDynamic goto do_if_static_true else do_if_static_false;
do_if_static_true:
    := bb lookup trueLabel program;
    := tmpStatic isEmpty bb;
    if tmpStatic goto stop_internal else cont_internal;
do_if_static_false:
    := bb lookup falseLabel program;
    := tmpStatic isEmpty bb;
    if tmpStatic goto stop_internal else cont_internal;
do_if_dynamic:
    := tmpDynamic '(trueLabel$vs);
    := pendingLabels consUnique trueLabel pendingLabels;
    := pending consUniqueIfNotInWithStateCompression tmpDynamic pending marked program;
    := tmpDynamic '(falseLabel$vs);
    := pendingLabels consUnique falseLabel pendingLabels;
    := pending consUniqueIfNotInWithStateCompression tmpDynamic pending marked program;
    := tmpDynamic reduce exp vs;
    := code extendIf code tmpDynamic trueLabel falseLabel vs;
    := tmpStatic isEmpty bb;
    if tmpStatic goto stop_internal else cont_internal;
do_return:
    := exp hd command;
    := tmpDynamic reduce exp vs;
    := code extendReturn code tmpDynamic;
    := tmpStatic isEmpty bb;
    if tmpStatic goto stop_internal else cont_internal;
cont1:
    := gotoSymbol 'goto;
    := tmpStatic == op gotoSymbol;
    if tmpStatic goto do_goto else cont2;
cont2:
    := ifSymbol 'if;
    := tmpStatic == op ifSymbol;
    if tmpStatic goto do_if else cont3;
cont3:
    := returnSymbol 'return;
    := tmpStatic == op returnSymbol;
    if tmpStatic goto do_return else fail;
fail:
    := fail 'fail;
    return fail;
stop_internal:
    := residual extendCode residual code;
    := tmpDynamic isEmpty pending;
    if tmpDynamic goto stop_external else cont_external;
stop_external:
    return residual;
}