/Users/Timur.Kudashev/CLionProjects/FlowchartFutamura/mix.flowchart
{ read program, division, vs0; #init!: := residual {}; := program parse program vs0; := used usedVars program; := pp0 lookupInitial program; := pendingLabels (); := pending ((pp0$vs0)); := marked (); goto #cont_external!; #cont_external!: := pp hd hd pending; := vs hd tl hd pending; := marked cons (pp $ vs) marked; := code initialCode pp vs used; := pending tl pending; := ppi pp0; := bb lookup pp0 program; if == ppi pp goto #cont_internal! else #continue_lookup!; #continue_lookup!: := ppi nextLabel ppi program pendingLabels; := bb lookup ppi program; if == ppi pp goto #cont_internal! else #continue_lookup!; #cont_internal!: := command firstCommand bb; := bb tl bb; := op hd command; := command tl command; if == op %:=/ goto #do_assignment! else #cont1!; #do_assignment!: := X hd command; := exp hd tl command; if isStatic division X goto #do_assignment_static! else #do_assignment_dynamic!; #do_assignment_static!: := vs addToState vs X eval exp vs; if isEmpty bb goto #stop_internal! else #cont_internal!; #do_assignment_dynamic!: := code extendAssignment code X reduce exp vs; if isEmpty bb goto #stop_internal! else #cont_internal!; #do_goto!: := bb lookup hd command program; if isEmpty bb goto #stop_internal! else #cont_internal!; #do_if!: := exp hd command; := trueLabel hd tl tl command; := falseLabel hd tl tl tl tl command; if isStatic division exp goto #do_if_static! else #do_if_dynamic!; #do_if_static!: if eval exp vs goto #do_if_static_true! else #do_if_static_false!; #do_if_static_true!: := bb lookup trueLabel program; if isEmpty bb goto #stop_internal! else #cont_internal!; #do_if_static_false!: := bb lookup falseLabel program; if isEmpty bb goto #stop_internal! else #cont_internal!; #do_if_dynamic!: := pendingLabels consUnique trueLabel pendingLabels; := pending consUniqueIfNotInWithStateCompression (trueLabel$vs) pending marked used; := pendingLabels consUnique falseLabel pendingLabels; := pending consUniqueIfNotInWithStateCompression (falseLabel$vs) pending marked used; := code extendIf code reduce exp vs trueLabel falseLabel vs used; if isEmpty bb goto #stop_internal! else #cont_internal!; #do_return!: := exp hd command; := code extendReturn code reduce exp vs; if isEmpty bb goto #stop_internal! else #cont_internal!; #cont1!: if == op %goto/ goto #do_goto! else #cont2!; #cont2!: if == op %if/ goto #do_if! else #cont3!; #cont3!: if == op %return/ goto #do_return! else #fail!; #fail!: return %fail/; #stop_internal!: := residual extendCode residual code; if isEmpty pending goto #stop_external! else #cont_external!; #stop_external!: return residual; }
(program$division$pp0$bb$command$X$exp$trueLabel$falseLabel$ppi$op$pendingLabels)
[program${ read Q, Right; #init!: := Qtail Q; := Left (); goto #loop!; #loop!: if == Qtail <> goto #stop! else #cont!; #cont!: := Instruction firstInstruction Qtail; := Qtail rest Qtail; := Operator hd Instruction; if == Operator %right/ goto #do_right! else #cont1!; #cont1!: if == Operator %left/ goto #do_left! else #cont2!; #cont2!: if == Operator %write/ goto #do_write! else #cont3!; #cont3!: if == Operator %goto/ goto #do_goto! else #cont4!; #cont4!: if == Operator %if/ goto #do_if! else #error!; #do_right!: := Left cons firstSym Right Left; := Right tl Right; goto #loop!; #do_left!: := Right cons firstSym Left Right; := Left tl Left; goto #loop!; #do_write!: := Right cons hd tl Instruction tl Right; goto #loop!; #do_goto!: := Qtail newTail hd tl Instruction Q; goto #loop!; #do_if!: := Symbol hd tl Instruction; := Nextlabel hd tl tl tl Instruction; if == Symbol firstSym Right goto #jump! else #loop!; #jump!: := Qtail newTail Nextlabel Q; goto #loop!; #error!: return %fail/; #stop!: return Right; }$division$(Q$Qtail$Instruction$Operator$Symbol$Nextlabel)]