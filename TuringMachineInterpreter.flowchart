read Q, Right;
init:
    := Qtail Q;
    := Left '();
    := emptyProgram '{};
    := rightCommand 'right;
    := leftCommand 'left;
    := writeCommand 'write;
    := gotoCommand 'goto;
    := ifCommand 'if;
    goto loop;
loop:
    := tmpStatic == Qtail emptyProgram;
    if tmpStatic goto stop else cont;
cont:
    := Instruction firstInstruction Qtail;
    := Qtail rest Qtail;
    := Operator hd Instruction;
    := tmpStatic == Operator rightCommand;
    if tmpStatic goto do_right else cont1;
cont1:
    := tmpStatic == Operator leftCommand;
    if tmpStatic goto do_left else cont2;
cont2:
    := tmpStatic == Operator writeCommand;
    if tmpStatic goto do_write else cont3;
cont3:
    := tmpStatic == Operator gotoCommand;
    if tmpStatic goto do_goto else cont4;
cont4:
    := tmpStatic == Operator ifCommand;
    if tmpStatic goto do_if else error;
do_right:
    := tmpDynamic firstSym Right;
    := Left cons tmpDynamic Left;
    := Right tl Right;
    goto loop;
do_left:
    := tmpDynamic firstSym Left;
    := Right cons tmpDynamic Right;
    := Left tl Left;
    goto loop;
do_write:
    := tmpStatic tl Instruction;
    := Symbol hd tmpStatic;
    := tmpDynamic tl Right;
    := Right cons Symbol tmpDynamic;
    goto loop;
do_goto:
    := tmpStatic tl Instruction;
    := Nextlabel hd tmpStatic;
    := Qtail newTail Nextlabel Q;
    goto loop;
do_if:
    := tmpStatic tl Instruction;
    := Symbol hd tmpStatic;
    := tmpStatic tl Instruction;
    := tmpStatic tl tmpStatic;
    := tmpStatic tl tmpStatic;
    := Nextlabel hd tmpStatic;
    := tmpDynamic firstSym Right;
    := tmpDynamic == Symbol tmpDynamic;
    if tmpDynamic goto jump else loop;
jump:
    := Qtail newTail Nextlabel Q;
    goto loop;
error:
    := fail 'fail;
    return fail;
stop:
    return Right;