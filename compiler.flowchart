{
read vs0;
#lab0!:
    := residual {} ;
    := pending ((#init! $ vs0)) ;
    := marked () ;
    := pp hd hd pending ;
    := vs hd tl hd pending ;
    := marked cons (pp $ vs) marked ;
    := code initialCode pp vs (((%Right/) $ #stop!) $ (() $ #fail!) $ ((%Q/ $ %Nextlabel/) $ #jump!) $ ((%Right/ $ %Instruction/ $ %Instruction/) $ #do_if!) $ ((%Q/ $ %Instruction/) $ #do_goto!) $ ((%Right/ $ %Instruction/) $ #do_write!) $ ((%Left/ $ %Right/ $ %Left/) $ #do_left!) $ ((%Right/ $ %Left/ $ %Right/) $ #do_right!) $ ((%Operator/) $ #cont4!) $ ((%Operator/) $ #cont3!) $ ((%Operator/) $ #cont2!) $ ((%Operator/) $ #cont1!) $ ((%Qtail/ $ %Qtail/) $ #cont!) $ ((%Qtail/) $ #loop!) $ ((%Q/) $ #init!)) ;
    := pending tl pending ;
    if == #init! pp goto #lab1! else #lab2! ;


#lab2!:
    if == #fail! pp goto #lab3! else #lab4! ;


#lab4!:
    if == #fail! pp goto #lab3! else #lab4! ;


#lab3!:
    := code extendReturn code reduce %fail/ vs ;
    := residual extendCode residual code ;
    if isEmpty pending goto #lab5! else #lab6! ;


#lab6!:
    := pp hd hd pending ;
    := vs hd tl hd pending ;
    := marked cons (pp $ vs) marked ;
    := code initialCode pp vs (((%Right/) $ #stop!) $ (() $ #fail!) $ ((%Q/ $ %Nextlabel/) $ #jump!) $ ((%Right/ $ %Instruction/ $ %Instruction/) $ #do_if!) $ ((%Q/ $ %Instruction/) $ #do_goto!) $ ((%Right/ $ %Instruction/) $ #do_write!) $ ((%Left/ $ %Right/ $ %Left/) $ #do_left!) $ ((%Right/ $ %Left/ $ %Right/) $ #do_right!) $ ((%Operator/) $ #cont4!) $ ((%Operator/) $ #cont3!) $ ((%Operator/) $ #cont2!) $ ((%Operator/) $ #cont1!) $ ((%Qtail/ $ %Qtail/) $ #cont!) $ ((%Qtail/) $ #loop!) $ ((%Q/) $ #init!)) ;
    := pending tl pending ;
    if == #init! pp goto #lab1! else #lab2! ;


#lab5!:
    return residual ;


#lab1!:
    := vs addToState vs %Qtail/ eval %Q/ vs ;
    := code extendAssignment code %Left/ reduce %()/ vs ;
    if eval %== Qtail <>/ vs goto #lab7! else #lab8! ;


#lab8!:
    := vs addToState vs %Instruction/ eval %firstInstruction Qtail/ vs ;
    := vs addToState vs %Qtail/ eval %rest Qtail/ vs ;
    := vs addToState vs %Operator/ eval %hd Instruction/ vs ;
    if eval %== Operator %right// vs goto #lab9! else #lab10! ;


#lab10!:
    if eval %== Operator %left// vs goto #lab11! else #lab12! ;


#lab12!:
    if eval %== Operator %write// vs goto #lab13! else #lab14! ;


#lab14!:
    if eval %== Operator %goto// vs goto #lab15! else #lab16! ;


#lab16!:
    if eval %== Operator %if// vs goto #lab17! else #lab18! ;


#lab18!:
    := code extendReturn code reduce %fail/ vs ;
    := residual extendCode residual code ;
    if isEmpty pending goto #lab5! else #lab6! ;


#lab17!:
    := vs addToState vs %Symbol/ eval %hd tl Instruction/ vs ;
    := vs addToState vs %Nextlabel/ eval %hd tl tl tl Instruction/ vs ;
    := pending consUniqueIfNotInWithStateCompression (%#jump!/ $ vs) pending marked (((%Right/) $ #stop!) $ (() $ #fail!) $ ((%Q/ $ %Nextlabel/) $ #jump!) $ ((%Right/ $ %Instruction/ $ %Instruction/) $ #do_if!) $ ((%Q/ $ %Instruction/) $ #do_goto!) $ ((%Right/ $ %Instruction/) $ #do_write!) $ ((%Left/ $ %Right/ $ %Left/) $ #do_left!) $ ((%Right/ $ %Left/ $ %Right/) $ #do_right!) $ ((%Operator/) $ #cont4!) $ ((%Operator/) $ #cont3!) $ ((%Operator/) $ #cont2!) $ ((%Operator/) $ #cont1!) $ ((%Qtail/ $ %Qtail/) $ #cont!) $ ((%Qtail/) $ #loop!) $ ((%Q/) $ #init!)) ;
    := pending consUniqueIfNotInWithStateCompression (%#loop!/ $ vs) pending marked (((%Right/) $ #stop!) $ (() $ #fail!) $ ((%Q/ $ %Nextlabel/) $ #jump!) $ ((%Right/ $ %Instruction/ $ %Instruction/) $ #do_if!) $ ((%Q/ $ %Instruction/) $ #do_goto!) $ ((%Right/ $ %Instruction/) $ #do_write!) $ ((%Left/ $ %Right/ $ %Left/) $ #do_left!) $ ((%Right/ $ %Left/ $ %Right/) $ #do_right!) $ ((%Operator/) $ #cont4!) $ ((%Operator/) $ #cont3!) $ ((%Operator/) $ #cont2!) $ ((%Operator/) $ #cont1!) $ ((%Qtail/ $ %Qtail/) $ #cont!) $ ((%Qtail/) $ #loop!) $ ((%Q/) $ #init!)) ;
    := code extendIf code reduce %== Symbol firstSym Right/ vs %#jump!/ %#loop!/ vs (((%Right/) $ #stop!) $ (() $ #fail!) $ ((%Q/ $ %Nextlabel/) $ #jump!) $ ((%Right/ $ %Instruction/ $ %Instruction/) $ #do_if!) $ ((%Q/ $ %Instruction/) $ #do_goto!) $ ((%Right/ $ %Instruction/) $ #do_write!) $ ((%Left/ $ %Right/ $ %Left/) $ #do_left!) $ ((%Right/ $ %Left/ $ %Right/) $ #do_right!) $ ((%Operator/) $ #cont4!) $ ((%Operator/) $ #cont3!) $ ((%Operator/) $ #cont2!) $ ((%Operator/) $ #cont1!) $ ((%Qtail/ $ %Qtail/) $ #cont!) $ ((%Qtail/) $ #loop!) $ ((%Q/) $ #init!)) ;
    := residual extendCode residual code ;
    if isEmpty pending goto #lab5! else #lab19! ;


#lab19!:
    := pp hd hd pending ;
    := vs hd tl hd pending ;
    := marked cons (pp $ vs) marked ;
    := code initialCode pp vs (((%Right/) $ #stop!) $ (() $ #fail!) $ ((%Q/ $ %Nextlabel/) $ #jump!) $ ((%Right/ $ %Instruction/ $ %Instruction/) $ #do_if!) $ ((%Q/ $ %Instruction/) $ #do_goto!) $ ((%Right/ $ %Instruction/) $ #do_write!) $ ((%Left/ $ %Right/ $ %Left/) $ #do_left!) $ ((%Right/ $ %Left/ $ %Right/) $ #do_right!) $ ((%Operator/) $ #cont4!) $ ((%Operator/) $ #cont3!) $ ((%Operator/) $ #cont2!) $ ((%Operator/) $ #cont1!) $ ((%Qtail/ $ %Qtail/) $ #cont!) $ ((%Qtail/) $ #loop!) $ ((%Q/) $ #init!)) ;
    := pending tl pending ;
    if == #init! pp goto #lab1! else #lab20! ;


#lab20!:
    if == #loop! pp goto #lab21! else #lab22! ;


#lab22!:
    if == #jump! pp goto #lab23! else #lab24! ;


#lab24!:
    if == #fail! pp goto #lab3! else #lab25! ;


#lab25!:
    if == #fail! pp goto #lab3! else #lab25! ;


#lab23!:
    := vs addToState vs %Qtail/ eval %newTail Nextlabel Q/ vs ;
    if eval %== Qtail <>/ vs goto #lab7! else #lab8! ;


#lab21!:
    if eval %== Qtail <>/ vs goto #lab7! else #lab8! ;


#lab15!:
    := vs addToState vs %Qtail/ eval %newTail hd tl Instruction Q/ vs ;
    if eval %== Qtail <>/ vs goto #lab7! else #lab8! ;


#lab13!:
    := code extendAssignment code %Right/ reduce %cons hd tl Instruction tl Right/ vs ;
    if eval %== Qtail <>/ vs goto #lab7! else #lab8! ;


#lab11!:
    := code extendAssignment code %Right/ reduce %cons firstSym Left Right/ vs ;
    := code extendAssignment code %Left/ reduce %tl Left/ vs ;
    if eval %== Qtail <>/ vs goto #lab7! else #lab8! ;


#lab9!:
    := code extendAssignment code %Left/ reduce %cons firstSym Right Left/ vs ;
    := code extendAssignment code %Right/ reduce %tl Right/ vs ;
    if eval %== Qtail <>/ vs goto #lab7! else #lab8! ;


#lab7!:
    := code extendReturn code reduce %Right/ vs ;
    := residual extendCode residual code ;
    if isEmpty pending goto #lab5! else #lab6! ;


}